#!/bin/bash

## Copyright (C) 2012 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

set -x
set -e

true "INFO: Currently running script: $BASH_SOURCE $@"

MYDIR="$( cd -- "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

cd -- "$MYDIR"

dist_build_internal_run="true"

source pre
source colors
source variables

cd -- "$(dirname -- "$MYDIR")"

import_key() {
  if ! gpg --quiet --list-keys -- "${derivative_signing_key_fingerprint[0]}" &>/dev/null; then
   true "INFO: Importing signing key ${derivative_signing_key##*/}"
   gpg --keyid-format long --import --import-options show-only --with-fingerprint -- "${derivative_signing_key}"
   gpg --import -- "${derivative_signing_key}"
   gpg --check-sigs -- "${derivative_signing_key_fingerprint[0]}"
  fi
}

signed_by_fingerprint() {
  fingerprint=$(git show --no-patch --pretty=format:%GF "${1}")
  
  for i in "${derivative_signing_key_fingerprint[@]}"; do
    [ "${fingerprint}" != "${i}" ]  || return 0
  done
  
  error "Signing key fingerprint does not match!"
}

run_git() {
  if [ "$(id -u)" = "0" ]; then
    error "Do not run this as root!"
  fi

  [ -z "${GIT}" ] || git pull

  git fetch --tags --depth=1

  [ -n "${TAG}" ] || TAG="$(git describe --tags "$(git rev-list --tags --max-count=1)")"

  if [ "$TAG" != "master" ]; then
    git verify-tag "$TAG"
    git describe "$TAG"
  fi

  git verify-commit "${TAG}^{commit}"
  
  signed_by_fingerprint "${TAG}^{commit}"

  git checkout "$TAG"

  git submodule sync --recursive >/dev/null

  git -c merge.verifySignatures=true submodule update --init --recursive --jobs=200 --merge >/dev/null

  git status
}

main() {
  import_key 2>&1 | tee -a -- "${HOME}/derivative-binary/logs/key.log"
  run_git 2>&1 | tee -a -- "${HOME}/derivative-binary/logs/git.log"
}

main "$@"
